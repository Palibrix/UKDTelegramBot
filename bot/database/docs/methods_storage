msg = KeyboardButton('Обране')
main_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(msg)


GET PRIMARY -> 0 IF NOT USER ELSE STR
            @dp.message_handler(regexp='Обране')
            async def get_primary(message: types.Message):
                request = db.get_primary(message.chat['id'])
                result = 'ERROR' if request in (-20, '') else request
                await message.answer(result, reply_markup=main_kb)b)



SET PRIMARY -> NONE
            @dp.message_handler()
            async def test_primary_set(message: types.Message):
                result = 'SET' if db.set_primary(message.chat['id'], message.text) == 1 else 'ERROR'
                await message.answer(result, reply_markup=main_kb)


GET FAVORITES -> 0 IF NOT USER ELSE ARRAY
            @dp.message_handler(regexp='Обране')
            async def test_favorites_get(message: types.Message):
                request = db.get_favorites(message.chat['id'])
                result = 'ERROR' if request in (-20, []) else request
                await message.answer(result, reply_markup=main_kb)



SET FAVORITES -> NONE
            @dp.message_handler()
            async def test_favorites_set(message: types.Message):
                result = 'SET' if db.set_favorites(message.chat['id'], message.text, isTeacher=True) == 1 else 'ERROR'
                await message.answer(result, reply_markup=main_kb)

DELETE -> 1 ON SUCCESS (ALWAYS)
            @dp.message_handler()
            async def test_favorites_delete(message: types.Message):
                request = db.delete_favorite(message.chat['id'], message.text)
                result = 'ERROR' if request in (20, []) else 'DELETE'
                await message.answer(result, reply_markup=main_kb)